import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io

st.set_page_config(page_title="üéì –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤", layout="wide")
st.title("üéì –î–∞—à–±–æ—Ä–¥ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É ‚Äì —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")

REQUIRED_COLS = {"–ü–Ü–ë", "–ì—Ä—É–ø–∞", "–ü—Ä–µ–¥–º–µ—Ç", "–°–µ–º–µ—Å—Ç—Ä", "–û—Ü—ñ–Ω–∫–∞"}

uploaded_file = st.file_uploader("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª –∑ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—é —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤", type=["csv"])

def normalize_columns(cols):
    # –ø—Ä–∏–≤–æ–¥–∏–º–æ –Ω–∞–∑–≤–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É (–±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤, –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä)
    return [c.strip() for c in cols]

if uploaded_file:
    try:
        # –°–ø—Ä–æ–±–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º–∏
        try:
            df = pd.read_csv(uploaded_file)
        except Exception:
            uploaded_file.seek(0)
            df = pd.read_csv(uploaded_file, encoding='utf-8', engine='python')

        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–∑–≤ (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏)
        original_cols = list(df.columns)
        cols_stripped = [c.strip() for c in original_cols]
        df.columns = cols_stripped

        st.subheader("üìÑ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ (–ø–µ—Ä—à—ñ 10 —Ä—è–¥–∫—ñ–≤)")
        st.dataframe(df.head(10))

        # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ (—Ä–æ–±–∏–º–æ –Ω–µ—á—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
        cols_lower_map = {c.lower(): c for c in df.columns}
        missing = []
        # —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ–∂–µ–Ω REQUIRED_COL —É —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö –Ω–µ—á—É—Ç–ª–∏–≤–æ –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
        col_map = {}
        for rc in REQUIRED_COLS:
            key = rc.lower()
            if key in cols_lower_map:
                col_map[rc] = cols_lower_map[key]
            else:
                missing.append(rc)

        if missing:
            st.error(f"–ù–µ–º–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ —É CSV: {', '.join(missing)}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ (–ü–Ü–ë, –ì—Ä—É–ø–∞, –ü—Ä–µ–¥–º–µ—Ç, –°–µ–º–µ—Å—Ç—Ä, –û—Ü—ñ–Ω–∫–∞).")
        else:
            # –ü–µ—Ä–µ–π–º–µ–Ω—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–∞–∑–≤–∏
            df = df.rename(columns={col_map[k]: k for k in col_map})

            # –û–±—Ä–æ–±–∫–∞ –æ—Ü—ñ–Ω–æ–∫: –∑–∞–º—ñ–Ω–∞ –∫–æ–º —É –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –Ω–∞ —Ç–æ—á–∫–∏, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ —á–∏—Å–ª–∞
            df["–û—Ü—ñ–Ω–∫–∞"] = df["–û—Ü—ñ–Ω–∫–∞"].astype(str).str.replace(",", ".")
            df["–û—Ü—ñ–Ω–∫–∞"] = pd.to_numeric(df["–û—Ü—ñ–Ω–∫–∞"], errors="coerce")
            before_drop = len(df)
            df = df.dropna(subset=["–û—Ü—ñ–Ω–∫–∞"])
            dropped = before_drop - len(df)
            if dropped > 0:
                st.warning(f"–í—ñ–¥–∫–∏–Ω—É—Ç–æ {dropped} —Ä—è–¥–∫—ñ–≤ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ/–ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ '–û—Ü—ñ–Ω–∫–∞'.")

            # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ –°–µ–º–µ—Å—Ç—Ä ‚Äî —Å—Ç—Ä–æ–∫–∞ (—â–æ–± selectbox –ø—Ä–∞—Ü—é–≤–∞–≤ —Å—Ç–∞–±—ñ–ª—å–Ω–æ)
            df["–°–µ–º–µ—Å—Ç—Ä"] = df["–°–µ–º–µ—Å—Ç—Ä"].astype(str)

            # –§—ñ–ª—å—Ç—Ä–∏
            col1, col2, col3 = st.columns(3)
            with col1:
                group_filter = st.selectbox("üéØ –ì—Ä—É–ø–∞", ["–í—Å—ñ"] + sorted(df["–ì—Ä—É–ø–∞"].astype(str).unique().tolist()))
            with col2:
                subject_filter = st.selectbox("üìò –ü—Ä–µ–¥–º–µ—Ç", ["–í—Å—ñ"] + sorted(df["–ü—Ä–µ–¥–º–µ—Ç"].astype(str).unique().tolist()))
            with col3:
                semester_filter = st.selectbox("üìÖ –°–µ–º–µ—Å—Ç—Ä", ["–í—Å—ñ"] + sorted(df["–°–µ–º–µ—Å—Ç—Ä"].astype(str).unique().tolist()))

            filtered_df = df.copy()
            if group_filter != "–í—Å—ñ":
                filtered_df = filtered_df[filtered_df["–ì—Ä—É–ø–∞"].astype(str) == group_filter]
            if subject_filter != "–í—Å—ñ":
                filtered_df = filtered_df[filtered_df["–ü—Ä–µ–¥–º–µ—Ç"].astype(str) == subject_filter]
            if semester_filter != "–í—Å—ñ":
                filtered_df = filtered_df[filtered_df["–°–µ–º–µ—Å—Ç—Ä"].astype(str) == semester_filter]

            st.subheader("üîç –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ (–ø–µ—Ä—à—ñ 20 —Ä—è–¥–∫—ñ–≤)")
            st.dataframe(filtered_df.head(20))

            if filtered_df.empty:
                st.warning("–ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –Ω–µ–º–∞—î —Ä—è–¥–∫—ñ–≤ ‚Äî —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ CSV.")
            else:
                # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π
                tab1, tab2 = st.tabs(["üìà –°–µ—Ä–µ–¥–Ω—ñ –æ—Ü—ñ–Ω–∫–∏", "üìä –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"])

                with tab1:
                    st.subheader("üìà –°–µ—Ä–µ–¥–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏")
                    avg_by_subject = filtered_df.groupby("–ü—Ä–µ–¥–º–µ—Ç")["–û—Ü—ñ–Ω–∫–∞"].mean().sort_values(ascending=False)
                    if avg_by_subject.empty:
                        st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –æ—Ü—ñ–Ω–æ–∫.")
                    else:
                        fig, ax = plt.subplots(figsize=(8, max(3, 0.4 * len(avg_by_subject))))
                        sns.barplot(x=avg_by_subject.values, y=avg_by_subject.index, ax=ax)
                        ax.set_xlabel("–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞")
                        ax.set_ylabel("–ü—Ä–µ–¥–º–µ—Ç")
                        ax.set_title("–°–µ—Ä–µ–¥–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")
                        st.pyplot(fig)
                        st.metric("üìä –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞ (–≤–∏–±—ñ—Ä–∫–∞)", f"{filtered_df['–û—Ü—ñ–Ω–∫–∞'].mean():.2f}")

                with tab2:
                    st.subheader("üìä –ö–æ—Ä–µ–ª—è—Ü—ñ—è –º—ñ–∂ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏")

                    pivot = filtered_df.pivot_table(index="–ü–Ü–ë", columns="–ü—Ä–µ–¥–º–µ—Ç", values="–û—Ü—ñ–Ω–∫–∞", aggfunc="mean")
                    if pivot.shape[1] < 2:
                        st.warning("–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ—ó.")
                    else:
                        corr = pivot.corr()
                        fig2, ax2 = plt.subplots(figsize=(7, 0.6 * corr.shape[0] + 3))
                        sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f", ax=ax2, vmin=-1, vmax=1)
                        ax2.set_title("–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤")
                        st.pyplot(fig2)

                # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                csv = filtered_df.to_csv(index=False).encode('utf-8')
                st.download_button("üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ", csv, "filtered_results.csv", "text/csv")

    except Exception as e:
        st.error("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É.")
        st.exception(e)
else:
    st.info("‚¨ÜÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∞—à–±–æ—Ä–¥.")

